Problem: Array A contains the elements, A_1,A_2…A_N. And array B contains the elements, B_1,B_2…B_N. There is a relationship between A_i and B_i, ∀ 1 ≤ i ≤ N, i.e., any element A_i lies between 1 and B_i. Let cost S of an array A is defined as: S=sum[i=2 to N]{ | A_i - A_{i-1} | } Print largest possible value of S.
Solution: For S to be largest A_i will either be 1 or B_i. We can make a simple DP now, say DP[n][2] where DP[i][0] stores the maximum value of S using first i elements only, if A_i was 1 and DP[i][1] stores the maximum value of S possible using the first i elements only, if A_i was B_i.
See setter's solution for more details.

#include<bits/stdc++.h>
using namespace std;
int ar[100005]={},dp[100005][2]={};
int main()
{
    int t;
    cin >> t;
    while(t--)
    {
        int n,i,j;
        cin >> n;
        for(i=0; i<n; i++)
            cin >> ar[i];
        for(i=0; i<n-1; i++)
        {
            dp[i+1][0]=max(dp[i][0],dp[i][1]+abs(ar[i]-1));
            dp[i+1][1]=max(dp[i][0]+abs(ar[i+1]-1),dp[i][1]+abs(ar[i]-ar[i+1]));
        }
        cout << max(dp[n-1][0],dp[n-1][1]) << endl;
    }
    return 0;
}
