/*Substring Diff

Given two strings of length n, P = p1p2...pn and Q = q1q2...qn, we define M(i,j,k) as the number of mismatches between p(i), p(i+1), ...p(i+k-1) and q(j), q(j+1)...,q(j+k-1). That is in set notation, M(i,j,k) refers to the size of the set

{0 <= x < k, p[i+x]| â‰  q[j+x]}
Given an integer S, your task is to find the maximum length L, such that, there exists pair of indices (i,j) for which we have M(i, j, L) <= S. Of course, we should also have i+L-1 <=n and j+L-1 <=n.

Input

The first line of input contains a single integer, T (1 <= T <= 10). T test cases follow. 
Each test case consists of an integer, S, and two strings P and Q separated by a single space. 

Output

For each test case output a single integer L which is the maximum value for which there exists pair of indices (i,j) such that M(i, j, L) <= S.

Constraints 
0 <= S <= length of the string P. 
Both P & Q would have the same length. 
The size of each of the string would be at the max 1500. 
All characters in P & Q are lower-case English letters.
*/

#include<stdio.h>
#include<iostream>
#include<string>
    
using namespace std;
int diff(string &,string &,int,int,int,int);
int main () {
    int num;
    cin>>num;
    for(int i=0; i<num; i++) {
        int numb;
        cin>>numb;
        string a,b;
        cin>>a>>b;
        int lent;
        lent= a.length();
        int max=0;
        for (int j=0; j<lent-num; j++) {
            for(int k=0; k<lent-num; k++) {
                int temp=0;
                temp= diff(a,b,numb,j,k,lent);
                if(max<temp)
                    max=temp;
                 
                
                
                
            }
            
            
        }
        cout<<max<<endl;   
    
        
        
        
    }
    
    
    return 0;
}


int diff(string &arr,string &arr1, int number,int t,int l,int len) {
    int diffen=number;
    int u=0;
    int k=0;
    while(diffen!=0 && t+u<len) {
     if(arr[t+u]!=arr1[l+u]) {
        diffen--;
        u++;       
        k++;
    }
     else {
        u++;
        
        
        
    }
    
    }
    return u;
       
}
    
    
